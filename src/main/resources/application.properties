#if MySQL installed
#spring.datasource.url = jdbc:mysql://localhost:3306/registration
#if MariaDB installed, add dependency mariadb-java-client from org.mariadb.jdbc
# docker run --name mysql-registration -p 3308:3306 -e MYSQL_DATABASE=registration -e MYSQL_USER=someuser -e MYSQL_PASSWORD=somepass -d yobasystems/alpine-mariadb
#spring.datasource.url = jdbc:mariadb://localhost:3308/registration
#spring.datasource.username = someuser
#spring.datasource.password = somepass
###Hibernate options
#logging.level.org.hibernate.SQ L= DEBUG
#spring.jpa.hibernate.ddl-auto = create
#spring.jpa.show-sql = true
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect
#spring.jpa.properties.hibernate.format_sql = true
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation = true
#spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


#if PostgreSQL installed
#spring.datasource.url = jdbc:postgresql://localhost:5432/registration
#if postgres:alpine installed (see on PostgreSQL's web site) -- and we assign port 8088
# docker run --name postgres-city -p 8088:5432 -e POSTGRES_PASSWORD=somepass -e POSTGRES_USER=someuser -e POSTGRES_DB=city -d postgres:alpine
spring.datasource.url = jdbc:postgresql://localhost:8088/city
spring.datasource.username = someuser
spring.datasource.password = somepass
###Hibernate options
logging.level.org.hibernate.SQL = DEBUG
spring.jpa.hibernate.ddl-auto = create-drop
spring.jpa.show-sql = true
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql = true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation = true
spring.jpa.hibernate.naming.physical-strategy = org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


server.port = 8080